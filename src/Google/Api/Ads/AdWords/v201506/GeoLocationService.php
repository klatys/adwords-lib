<?php
/*
 * File generated by ClassyFile <https://github.com/onema/classyfile>
 * (c) 2015, Juan Manuel Torres
 *
 * For the full copyright and license information,
 * please view the LICENSE file that was distributed
 * with this source code.
 */
namespace Google\Api\Ads\AdWords\v201506;
use Google\Api\Ads\AdWords\Lib\AdWordsSoapClient;

/**
   * GeoLocationService
   * @package Google_Api_Ads_AdWords_v201506
   * @subpackage v201506
   */
class GeoLocationService extends AdWordsSoapClient
{
    const SERVICE_NAME = 'GeoLocationService';
    const WSDL_NAMESPACE = 'https://adwords.google.com/api/adwords/cm/v201506';
    const ENDPOINT = 'https://adwords.google.com/api/adwords/cm/v201506/GeoLocationService';
    /**
     * The endpoint of the service
     * @var string
     */
    public static $endpoint = 'https://adwords.google.com/api/adwords/cm/v201506/GeoLocationService';
    /**
     * Default class map for wsdl=>php
     * @access private
     * @var array
     */
    public static $classmap = array(
        'Address'                      => Address::class,
        'AuthenticationError'          => AuthenticationError::class,
        'AuthorizationError'           => AuthorizationError::class,
        'ClientTermsError'             => ClientTermsError::class,
        'DistinctError'                => DistinctError::class,
        'GeoLocationError'             => GeoLocationError::class,
        'GeoLocationSelector'          => GeoLocationSelector::class,
        'GeoPoint'                     => GeoPoint::class,
        'IdError'                      => IdError::class,
        'InternalApiError'             => InternalApiError::class,
        'InvalidGeoLocation'           => InvalidGeoLocation::class,
        'NotEmptyError'                => NotEmptyError::class,
        'NullError'                    => NullError::class,
        'OperationAccessDenied'        => OperationAccessDenied::class,
        'QuotaCheckError'              => QuotaCheckError::class,
        'RangeError'                   => RangeError::class,
        'RateExceededError'            => RateExceededError::class,
        'ReadOnlyError'                => ReadOnlyError::class,
        'RegionCodeError'              => RegionCodeError::class,
        'RejectedError'                => RejectedError::class,
        'RequestError'                 => RequestError::class,
        'RequiredError'                => RequiredError::class,
        'SizeLimitError'               => SizeLimitError::class,
        'SoapHeader'                   => SoapRequestHeader::class,
        'SoapResponseHeader'           => SoapResponseHeader::class,
        'StringLengthError'            => StringLengthError::class,
        'DatabaseError'                => DatabaseError::class,
        'GeoLocation'                  => GeoLocation::class,
        'ApiError'                     => ApiError::class,
        'ApiException'                 => ApiException::class,
        'ApplicationException'         => ApplicationException::class,
        'AuthenticationError.Reason'   => AuthenticationErrorReason::class,
        'AuthorizationError.Reason'    => AuthorizationErrorReason::class,
        'ClientTermsError.Reason'      => ClientTermsErrorReason::class,
        'DatabaseError.Reason'         => DatabaseErrorReason::class,
        'DistinctError.Reason'         => DistinctErrorReason::class,
        'GeoLocationError.Reason'      => GeoLocationErrorReason::class,
        'IdError.Reason'               => IdErrorReason::class,
        'InternalApiError.Reason'      => InternalApiErrorReason::class,
        'NotEmptyError.Reason'         => NotEmptyErrorReason::class,
        'NullError.Reason'             => NullErrorReason::class,
        'OperationAccessDenied.Reason' => OperationAccessDeniedReason::class,
        'QuotaCheckError.Reason'       => QuotaCheckErrorReason::class,
        'RangeError.Reason'            => RangeErrorReason::class,
        'RateExceededError.Reason'     => RateExceededErrorReason::class,
        'ReadOnlyError.Reason'         => ReadOnlyErrorReason::class,
        'RegionCodeError.Reason'       => RegionCodeErrorReason::class,
        'RejectedError.Reason'         => RejectedErrorReason::class,
        'RequestError.Reason'          => RequestErrorReason::class,
        'RequiredError.Reason'         => RequiredErrorReason::class,
        'SizeLimitError.Reason'        => SizeLimitErrorReason::class,
        'StringLengthError.Reason'     => StringLengthErrorReason::class,
        'get'                          => GeoLocationServiceGet::class,
        'getResponse'                  => GeoLocationServiceGetResponse::class
    );

    /**
     * Constructor using wsdl location and options array
     * @param string $wsdl WSDL location for this service
     * @param array $options Options for the SoapClient
     */
    public function __construct($wsdl, $options, $user)
    {
        $options['classmap'] = self::$classmap;
        parent::__construct($wsdl, $options, $user, self::SERVICE_NAME, self::WSDL_NAMESPACE);
    }
    /**
     * <span class="constraint Required">This field is required and should not be {@code null}.</span>
     * 
     * 
     * 
     * Retrieves the geographic location information for the address specified.
     * 
     * @param selector specifies the addresses.
     * @return list of {@link GeoLocation} objects. Returns {@link InvalidGeoLocation} object if
     * the address cannot be geocoded.
     * @throws ApiException if problems occurred while retrieving the location information
     */
    public function get($selector)
    {
        $args = new GeoLocationServiceGet($selector);
        $result = $this->__soapCall('get', array($args));
        return $result->rval;
    }
}
