<?php
/*
 * File generated by ClassyFile <https://github.com/onema/classyfile>
 * (c) 2015, Juan Manuel Torres
 *
 * For the full copyright and license information,
 * please view the LICENSE file that was distributed
 * with this source code.
 */
namespace Google\Api\Ads\Common\Util;

/**
 * A collection of utility methods for working with OGNL paths.
 * @package GoogleApiAdsCommon
 * @subpackage Util
 */
class OgnlUtils
{
    /**
     * Matches either a field or an index, and ensures the required punctionation
     * between tokens.
     */
    private static $OGNL_TOKEN_REGEX = '/^(?:(\\w+)|\\[(\\d+)\\])(?:$|\\.|(?=\\[))/';
    /**
     * Matches the operation index within an OGNL expression.
     */
    private static $OPERATION_INDEX_REGEX = '/^operations\\[(\\d+)\\]/';
    /**
     * The OgnlUtils class is not meant to have any instances.
     */
    private function __construct()
    {
    }
    /**
     * Gets the value of an OGNL expression in the given context.
     * @param $expression the OGNL expression to evaluate
     * @param $context the context in which to evaluate the expression
     * @return the value of the expression or null if the expression is invalid
     */
    public static function GetValue($expression, $context)
    {
        if (!isset($expression) || !isset($context)) {
            return null;
        }
        while (strlen($expression) > 0) {
            $matches = array();
            if (preg_match(self::$OGNL_TOKEN_REGEX, $expression, $matches)) {
                $token = array_shift($matches);
                $expression = substr($expression, strlen($token));
                // Remove empty matches.
                $matches = array_filter($matches, 'strlen');
                foreach ($matches as $field) {
                    if (is_object($context) && property_exists($context, $field)) {
                        $context = $context->{$field};
                    } else {
                        if (is_array($context) && array_key_exists($field, $context)) {
                            $context = $context[$field];
                        } else {
                            // Field doesn't evaluate in the context.
                            return null;
                        }
                    }
                }
            } else {
                // Invalid expression.
                return null;
            }
        }
        return $context;
    }
    /**
     * Retrieves the operation index from an OGNL expression that references an
     * operation.
     * @param string $expression the OGNL expression
     * @return int the operation index referenced, or null if no operation was
     *     references
     */
    public static function GetOperationIndex($expression)
    {
        $matches = array();
        if (preg_match(self::$OPERATION_INDEX_REGEX, $expression, $matches)) {
            return $matches[1];
        } else {
            return null;
        }
    }
}
